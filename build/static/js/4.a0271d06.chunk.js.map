{"version":3,"sources":["components/Card/index.js","components/EmptySearch/index.js","containers/product-list/containers/ProductListView.js","containers/product-list/containers/ProductListContainer.js"],"names":["icons","images","Card","product","id","title","price","condition","picture","state","freeShipping","free_shipping","productLink","className","data-testid","to","src","alt","formatPrice","amount","currency","shipping","EmptySearch","ProductListView","props","nextProps","this","isSearchChanged","getProducts","document","clearReducer","location","nextPropsSearch","getParamUrl","getSearchValue","getProductList","products","loadingView","map","key","length","Loader","show","renderEmptySearch","renderCards","Component","ProductListContainer","connect","productListReducer","dispatch","search","sagaProductList"],"mappings":"kSAOQA,EAAUC,IAAVD,MAyDOE,EAvDF,SAAC,GAA+F,IAAD,IAA5FC,QAAWC,EAAiF,EAAjFA,GAAIC,EAA6E,EAA7EA,MAAOC,EAAsE,EAAtEA,MAAOC,EAA+D,EAA/DA,UAAWC,EAAoD,EAApDA,QAASC,EAA2C,EAA3CA,MAAsBC,EAAqB,EAApCC,cAChEC,EAAW,iBAAaR,EAAb,kBAAyBC,GAM1C,OACE,yBAAKQ,UAAU,iBAAiBC,cAAaV,GAC3C,kBAAC,IAAD,CAAMU,cAAY,eAAeC,GAAIH,GACnC,yBAAKI,IAAKR,EAASS,IAAKZ,EAAOQ,UAAU,aAG3C,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAME,GAAIH,EAAaC,UAAU,SAC/B,8BACIK,YAAYZ,EAAMa,OAAQb,EAAMc,WAbVV,EAChC,yBAAKI,cAAY,gBAAgBE,IAAKhB,EAAMqB,SAAUJ,IAAI,kBAAeJ,UAAU,kBACjF,MAiBE,0BAAMA,UAAU,SACbJ,GAGH,kBAAC,IAAD,CAAMK,cAAY,eAAeC,GAAIH,GACnC,wBAAIC,UAAU,SACXR,GAGH,0BAAMQ,UAAU,aACbN,O,QCvBEe,G,OAfK,kBAClB,yBAAKR,cAAY,yBAAyBD,UAAU,0BAClD,6BACE,0BAAMA,UAAU,WAAhB,qDAIA,wBAAIA,UAAU,QACZ,sEACA,uFCsFOU,G,yDAzFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDf,MAAQ,GAFI,E,+DAKAgB,GACbC,KAAKC,gBAAgBF,IACvBC,KAAKE,gB,0CAKPC,SAASxB,MAAQ,gBAEjBqB,KAAKE,gB,8CAKLE,EADyBJ,KAAKF,MAAtBM,kB,sCAIML,GAAY,IAClBM,EAAaN,EAAbM,SACFC,EAAkBC,YAAY,SAAUF,GAG9C,OAFsBL,KAAKQ,mBAEFF,I,uCAGT,IACRD,EAAaL,KAAKF,MAAlBO,SACR,OAAOE,YAAY,SAAUF,K,qCAO7BI,EAH2BT,KAAKF,MAAxBW,gBACOT,KAAKQ,oB,oCAKP,IAAD,EACsBR,KAAKF,MAA/BY,EADI,EACJA,SAER,OAHY,EACMC,YAQX,KALED,EAASE,KAAI,SAACnC,GAAD,OAClB,kBAAC,EAAD,CAAMoC,IAAKpC,EAAQC,GAAID,QAASA,S,0CAOjB,IAAD,EACgBuB,KAAKF,MAA/BY,EADU,EACVA,SAER,OAHkB,EACAC,aAEGD,EAASI,OAIvB,KAHE,kBAAC,EAAD,Q,+BAMD,IACAH,EAAgBX,KAAKF,MAArBa,YAER,OACE,yBAAKxB,UAAU,qBACb,yBAAKA,UAAU,aACb,kBAAC4B,EAAA,EAAD,CAAQC,KAAML,IAEZX,KAAKiB,oBAELjB,KAAKkB,oB,GA3EaC,c,QCJxBC,EAAuBvB,EAYdwB,uBAVS,SAACtC,GAAD,MAAY,CAClC2B,SAAU3B,EAAMuC,mBAAmBZ,SACnCC,YAAa5B,EAAMuC,mBAAmBX,gBAGb,SAACY,GAAD,MAAe,CACxCnB,aAAc,kBAAMmB,EAASnB,gBAC7BK,eAAgB,SAACe,GAAD,OAAYD,EAASE,YAAgBD,QAGxCH,CAA6CD","file":"static/js/4.a0271d06.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport images from '../../config/images';\nimport './styles.scss';\nimport { formatPrice } from '../../lib/utils';\n\nconst { icons } = images;\n\nconst Card = ({ product: { id, title, price, condition, picture, state, free_shipping: freeShipping } }) => {\n  const productLink = `/items/${id}?title=${title}`;\n\n  const renderFreeShipping = () => (freeShipping ? (\n    <img data-testid=\"free-shipping\" src={icons.shipping} alt=\"Envío gratis\" className=\"free-shipping\" />\n  ) : null);\n\n  return (\n    <div className=\"card-component\" data-testid={id}>\n      <Link data-testid=\"link-picture\" to={productLink}>\n        <img src={picture} alt={title} className=\"picture\" />\n      </Link>\n\n      <div className=\"product-info\">\n        <Link to={productLink} className=\"price\">\n          <span>\n            { formatPrice(price.amount, price.currency) }\n          </span>\n\n          { renderFreeShipping(freeShipping) }\n        </Link>\n\n        <span className=\"state\">\n          {state}\n        </span>\n\n        <Link data-testid=\"link-details\" to={productLink}>\n          <h2 className=\"title\">\n            {title}\n          </h2>\n\n          <span className=\"condition\">\n            {condition}\n          </span>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  product: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    price: PropTypes.shape({\n      currency: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n    }).isRequired,\n    title: PropTypes.string.isRequired,\n    condition: PropTypes.string.isRequired,\n    picture: PropTypes.string.isRequired,\n    state: PropTypes.string.isRequired,\n    free_shipping: PropTypes.bool.isRequired,\n  }).isRequired,\n};\n\nexport default Card;\n","import React from 'react';\nimport './styles.scss';\n\nconst EmptySearch = () => (\n  <div data-testid=\"empty-search-component\" className=\"empty-search-component\">\n    <div>\n      <span className=\"message\">\n        No hay anuncios que coincidan con su búsqueda.\n      </span>\n\n      <ul className=\"tips\">\n        <li>Revisa la ortografía de la palabra.</li>\n        <li>Use palabras más genéricas o menos palabras.</li>\n      </ul>\n    </div>\n  </div>\n);\n\nexport default EmptySearch;\n","import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport Card from '../../../components/Card/index';\nimport { getParamUrl } from '../../../lib/utils';\nimport Loader from '../../../components/Loader/index';\nimport EmptySearch from '../../../components/EmptySearch';\nimport './styles.scss';\n\nclass ProductListView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidUpdate(nextProps) {\n    if (this.isSearchChanged(nextProps)) {\n      this.getProducts();\n    }\n  }\n\n  componentDidMount() {\n    document.title = 'Mercado Libre';\n\n    this.getProducts();\n  }\n\n  componentWillUnmount() {\n    const { clearReducer } = this.props;\n    clearReducer();\n  }\n\n  isSearchChanged(nextProps) {\n    const { location } = nextProps;\n    const nextPropsSearch = getParamUrl('search', location);\n    const currentSearch = this.getSearchValue();\n\n    return currentSearch !== nextPropsSearch;\n  }\n\n  getSearchValue() {\n    const { location } = this.props;\n    return getParamUrl('search', location);\n  }\n\n  getProducts() {\n    const { getProductList } = this.props;\n    const search = this.getSearchValue();\n\n    getProductList(search);\n  }\n\n  renderCards() {\n    const { products, loadingView } = this.props;\n\n    if (!loadingView) {\n      return products.map((product) => (\n        <Card key={product.id} product={product} />\n      ));\n    }\n\n    return null;\n  }\n\n  renderEmptySearch() {\n    const { products, loadingView } = this.props;\n\n    if (!loadingView && !products.length) {\n      return <EmptySearch />;\n    }\n\n    return null;\n  }\n\n  render() {\n    const { loadingView } = this.props;\n\n    return (\n      <div className=\"product-list-view\">\n        <div className=\"wrap-list\">\n          <Loader show={loadingView} />\n\n          { this.renderEmptySearch() }\n\n          { this.renderCards() }\n        </div>\n      </div>\n    );\n  }\n}\n\nProductListView.propTypes = {\n  clearReducer: PropTypes.func.isRequired,\n  getProductList: PropTypes.func.isRequired,\n  products: PropTypes.array.isRequired,\n  loadingView: PropTypes.bool.isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nexport default ProductListView;\n","import { connect } from 'react-redux';\nimport ProductListView from './ProductListView';\nimport { clearReducer, sagaProductList } from '../actions';\n\nconst ProductListContainer = ProductListView;\n\nconst mapStateToProps = (state) => ({\n  products: state.productListReducer.products,\n  loadingView: state.productListReducer.loadingView,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  clearReducer: () => dispatch(clearReducer()),\n  getProductList: (search) => dispatch(sagaProductList(search)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductListContainer);\n"],"sourceRoot":""}